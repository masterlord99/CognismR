)
}
}
get_embedded_titles("director")
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[tokens[1,grepl(colnames(tokens),pattern = "token")],]
retrun(apply(tmp, 2, mean))
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("director")
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[tokens[1,grepl(colnames(tokens),pattern = "token")],]
return(apply(tmp, 2, mean))
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("director")
is.matrix(tokens)
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[tokens[1,grepl(colnames(tokens),pattern = "token")],]
if(is.matrix(tmp)){
return(apply(tmp, 2, mean))
}else{
return(tmp)
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("director")
get_embedded_titles("director") %>% class()
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[tokens[1,grepl(colnames(tokens),pattern = "token")],]
if(is.matrix(tmp)){
return(as.matrix(apply(tmp, 2, mean)))
}else{
return(as.matrix(tmp))
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("director") %>% class()
get_embedded_titles("director")
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[tokens[1,grepl(colnames(tokens),pattern = "token")],]
if(is.matrix(tmp)){
return(as.matrix(apply(tmp, 2, mean)) %>% t)
}else{
return(as.matrix(tmp) %>% t)
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("director")
get_embedded_titles("finance director")
query <- "finance director"
tokens <- assignRoleTokens(query)
ength(query)==1
length(query)==1
tmp <- tokensEmbedding[tokens[1,grepl(colnames(tokens),pattern = "token")],]
tokens[1,grepl(colnames(tokens),pattern = "token")]
tmp <- tokensEmbedding[tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector() ,]
tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector()
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector()) ,]
(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector()
(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector())
(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector())
(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector())
(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% as.vector()) %>% class()
(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist())
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return(as.matrix(apply(tmp, 2, mean)) %>% t)
}else{
return(as.matrix(tmp) %>% t)
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("finance director")
as.matrix(apply(tmp, 2, mean))
as.matrix(apply(tmp, 2, mean)) %>% t
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("finance director")
tokens <- assignRoleTokens(query)
source('C:/Users/jakob/Desktop/CognismR/R/assignRoleTokens.R')
assignRoleTokens("finance director")
debugSource('C:/Users/jakob/Desktop/CognismR/R/assignRoleTokens.R')
assignRoleTokens("finance director")
exists("tmp") & exists("ii")
exists("tmp") & !exists("ii")
tmp
alrdyHave
tmp
rm(tmp)
assignRoleTokens("finance director")
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("finance director")
get_embedded_titles("null")
assignRoleTokens("na")
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
if(is.na(tokens$token1)){
warning("Unable to classify")
return(NULL)
}else{
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
if(is.na(tokens$token1)){
warning("Unable to tokenize!")
return(NULL)
}else{
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
assignRoleTokens("na")
get_embedded_titles("null")
library(CognismR)
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
if(is.na(tokens$token1)){
warning("Unable to tokenize!")
return(NULL)
}else{
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}
}else{
retrun(
apply(tokens[,grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
)
}
}
get_embedded_titles("director")
get_embedded_titles("director haha")
get_embedded_titles("direc haha")
get_embedded_titles("director finance")
debugSource('C:/Users/jakob/Desktop/CognismR/R/embeddingFunctions.R')
get_embedded_titles(c("director finance","manager","nul"))
debugSource('C:/Users/jakob/Desktop/CognismR/R/embeddingFunctions.R')
get_embedded_titles(c("director finance","manager","nul"))
debugSource('C:/Users/jakob/Desktop/CognismR/R/embeddingFunctions.R')
get_embedded_titles(c("director finance","manager","nul"))
debugSource('C:/Users/jakob/Desktop/CognismR/R/embeddingFunctions.R')
get_embedded_titles(c("director finance","manager","nul"))
debugSource('C:/Users/jakob/Desktop/CognismR/R/embeddingFunctions.R')
get_embedded_titles(c("director finance","manager","nul"))
library(CognismR)
get_embedded_titles(c("director finance","manager","nul"))
debugSource('C:/Users/jakob/Desktop/CognismR/R/embeddingFunctions.R')
debugSource('C:/Users/jakob/Desktop/CognismR/R/embeddingFunctions.R')
query <- c("director finance","manager","nul")
query <- c("director finance","manager","nul")
tokens <- assignRoleTokens(query)
tokens
!is.na(tokens$token1)
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F]
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
print(class(x))
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
print(class(x))
print(x)
tmp <- tokensEmbedding[x,]
apply(tmp, 2, mean)
})
tokensEmbedding
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
print(class(x))
print(x)
tmp <- tokensEmbedding[na.omit(x),]
apply(tmp, 2, mean)
})
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[na.omit(x),]
if(is.matrix(tmp)){
return(apply(tmp,1,mean))
}else{
return(tmp)
}
})
str(vectors)
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[na.omit(x),]
if(is.matrix(tmp)){
return(apply(tmp,2,mean))
}else{
return(tmp)
}
})
dim(vectors)
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[na.omit(x),]
if(is.matrix(tmp)){
return(apply(tmp,2,mean)) %>% t
}else{
return(tmp)
}
})
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[na.omit(x),]
if(is.matrix(tmp)){
return(apply(tmp,2,mean))
}else{
return(tmp)
}
}) %>% t
vectors
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
if(is.na(tokens$token1)){
warning("Unable to tokenize!")
return(NULL)
}else{
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}
}else{
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[na.omit(x),]
if(is.matrix(tmp)){
return(apply(tmp,2,mean))
}else{
return(tmp)
}
}) %>% t
out <- matrix(NA,length(query),ncol(tokensEmbedding))
out[!is.na(tokens$token1),] <- vectors
return(out)
}
}
get_embedded_titles(c("director finance","manager","nul"))
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
if(is.na(tokens$token1)){
warning("Unable to tokenize!")
return(matrix(NA,1,ncol(tokensEmbedding)))
}else{
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}
}else{
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[na.omit(x),]
if(is.matrix(tmp)){
return(apply(tmp,2,mean))
}else{
return(tmp)
}
}) %>% t
out <- matrix(NA,length(query),ncol(tokensEmbedding))
out[!is.na(tokens$token1),] <- vectors
return(out)
}
}
get_embedded_titles(c("director finance","manager","nul"))
get_embedded_titles <- function(query){
tokens <- assignRoleTokens(query)
if(length(query)==1){
if(is.na(tokens$token1)){
warning("Unable to tokenize!")
return(matrix(NA,1,ncol(tokensEmbedding)))
}else{
tmp <- tokensEmbedding[(tokens[1,grepl(colnames(tokens),pattern = "token")] %>% unlist()) ,]
if(is.matrix(tmp)){
return((as.matrix(apply(tmp, 2, mean)) %>% t))
}else{
return(as.matrix(tmp) %>% t)
}
}
}else{
vectors <-  apply(tokens[!is.na(tokens$token1),grepl(colnames(tokens),pattern = "token"),drop=F],1,function(x){
tmp <- tokensEmbedding[na.omit(x),]
if(is.matrix(tmp)){
return(apply(tmp,2,mean))
}else{
return(tmp)
}
}) %>% t
out <- matrix(NA,length(query),ncol(tokensEmbedding))
out[!is.na(tokens$token1),] <- vectors
if(sum(!is.na(tokens$token1)) < length(query)){
warning("Unable to tokenize some queries!")
}
return(out)
}
}
get_embedded_titles(c("director finance","manager","nul"))
library(CognismR)
get_embedded_titles(c("nul"))
?list
query <- c("director finance","manager","nul")
em_matrix <- get_embedded_titles(query)
ind <- apply(em_matrix,1,function(x)any(is.na))
ind <- apply(em_matrix,1,function(x)any(is.na(x)))
ind <- !apply(em_matrix,1,function(x)any(is.na(x)))
out <- rep(list(),length(query))
length(query)
out <- rep(list(NULL),length(query))
out
# em_matrix <- get_embedded_titles(query)
# ind <- !apply(em_matrix,1,function(x)any(is.na(x)))
# out <- rep(list(NULL),length(query))
# find_similar_words()
find_similar_words(query)
# em_matrix <- get_embedded_titles(query)
# ind <- !apply(em_matrix,1,function(x)any(is.na(x)))
# out <- rep(list(NULL),length(query))
# find_similar_words()
find_similar_words(query)
# em_matrix <- get_embedded_titles(query)
# ind <- !apply(em_matrix,1,function(x)any(is.na(x)))
# out <- rep(list(NULL),length(query))
# find_similar_words()
find_similar_words(query[1:2])
ind <- !apply(similarities,1,function(x)any(is.na(x)))
similarities <- get_embedded_titles(query)
ind <- !apply(similarities,1,function(x)any(is.na(x)))
out <- rep(list(NULL),length(query))
similarities <- similarities %>%  sim2(tokensEmbedding, y = ., method = "cosine")
v <- list(query=query,matches = similarities[,1] %>% sort(decreasing = TRUE) %>% head(n),vectorized = vec)
n <- 10
similarities[,1]
similarities <- get_embedded_titles(query)
ind <- !apply(similarities,1,function(x)any(is.na(x)))
out <- rep(list(NULL),length(query))
similarities2 <- similarities %>%  sim2(tokensEmbedding, y = ., method = "cosine")
for(i in which(ind)){
out[[i]] <- list(query=query[i],matches = similarities2[,i] %>% sort(decreasing = TRUE) %>% head(n),vectorized = similarities2[i,])
}
out
get_tokens_matching <- function(query,n=10){
similarities <- get_embedded_titles(query)
ind <- !apply(similarities,1,function(x)any(is.na(x)))
out <- rep(list(NULL),length(query))
similarities2 <- similarities %>%  sim2(tokensEmbedding, y = ., method = "cosine")
for(i in which(ind)){
out[[i]] <- list(query=query[i],matches = similarities2[,i] %>% sort(decreasing = TRUE) %>% head(n),vectorized = similarities2[i,])
}
names(out) <- query
return(out)
}
get_tokens_matching(query)
get_tokens_matching <- function(query,n=10){
similarities <- get_embedded_titles(query)
ind <- !apply(similarities,1,function(x)any(is.na(x)))
out <- rep(list(NULL),length(query))
similarities2 <- similarities %>%  sim2(tokensEmbedding, y = ., method = "cosine")
for(i in which(ind)){
out[[i]] <- list(query=query[i],matches = similarities2[,i] %>% sort(decreasing = TRUE) %>% head(n),vectorized = similarities[i,])
}
names(out) <- query
return(out)
}
get_tokens_matching(query)
get_space_matching <- function(query,n=10){
similarities <- get_embedded_titles(query)
ind <- !apply(similarities,1,function(x)any(is.na(x)))
out <- rep(list(NULL),length(query))
similarities2 <- similarities %>%  sim2(vectorizedSpace, y = ., method = "cosine")
for(i in which(ind)){
out[[i]] <- list(query=query[i],matches = similarities2[,i] %>% sort(decreasing = TRUE) %>% head(n),vectorized = similarities[i,])
}
names(out) <- query
return(out)
}
get_space_matching(query)
psim2(vectorizedSpace,vectorizedSpace)
sim2(vectorizedSpace,vectorizedSpace,method = "cosine")
library(CognismR)
CognismR::run_APP()
library(CognismR)
run_APP()
